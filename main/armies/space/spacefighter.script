targetPosition = nil

action_move = hash("move")
action_attack = hash("attack")
action_attack_move = hash("attack_move")

function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.speed = 120
	self.animation = nil
	self.faceLeft = true
	self.attacking = false
	self.attack_anim = nil
	self.firingLaser = false
	self.currentAction = nil
	self.lastTarget = nil
	self.attackCooldown = 1
	self.attackCooldownTimer = 0
	self.shiverRounds = 10
	self.needsToShiver = false

	math.randomseed(os.time())
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function move_done(self)
	self.targetPosition = nil
	self.needsToShiver = true
end

local function attack_done (self)
	self.attacking = false
end

local function rotateShip(target)
	local to = go.get_position()
	local from = vmath.vector3(target.x, target.y, 0)
	local angle = math.atan2(to.x - from.x, from.y - to.y)
	rotation = vmath.quat_rotation_z(angle)
	go.set_rotation(rotation)
end

function shiverIdleLocation(self)
	local xShiver = math.random(-20, 20)
	local yShiver = math.random(-20, 20)
	local shiverLocation = go.get_position() + vmath.vector3(xShiver, yShiver, 0)
	local duration = 1
	print("new loc", shiverLocation)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, shiverLocation, go.EASING_LINEAR, duration, 0)

	self.needsToShiver = false
end

function update(self, dt)
	sprite.set_hflip("#sprite", self.faceLeft)
	local currentPosition = go.get_position()
	local anim = hash("idle")
	
	if (self.currentAction == action_move or self.currentAction == action_attack_move) and self.targetPosition ~= nil then	
		local distance = vmath.length(self.targetPosition - currentPosition)
		local duration = distance / self.speed
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.targetPosition, go.EASING_LINEAR, duration, 0, move_done)
		anim = hash("move")
	end

	-- fire if coolDown over
	if self.currentAction == action_attack_move and self.lastTarget ~= nil then
		if self.attackCooldownTimer == 0 then
			local tempV3 = self.lastTarget - currentPosition
			if vmath.length(tempV3) > 0 then
				local playerDir = vmath.normalize(tempV3)
				--print("playerDir -> ", playerDir)
				local angle = math.atan2(playerDir.y, playerDir.x)
				local rot = vmath.quat_rotation_z(angle)
				local props = { dir = playerDir }
				factory.create("#laserFactory", nil, rot, props)
				self.attackCooldownTimer = self.attackCooldown
			else
				--print("arrived at destination")
			end
		else
			self.attackCooldownTimer = self.attackCooldownTimer - dt
			if self.attackCooldownTimer <= 0 then
				self.attackCooldownTimer = 0
			end
		end
	end

	if self.animation ~= anim then
		self.animation = anim
		msg.post("#sprite", "play_animation", { id = anim})
	end

	if anim == hash("idle") and self.needsToShiver == true then
		shiverIdleLocation(self)
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if (action_id == hash("touch") or action_id == hash("attack-move")) and action.pressed then
		self.targetPosition = vmath.vector3(action.x, action.y, go.get_position().z)
		self.lastTarget = self.targetPosition
		rotateShip(self.targetPosition)
		if action_id == hash("touch") then
			self.currentAction = action_move
		elseif action_id == hash("attack-move") then
			self.currentAction = action_attack_move
		end
	elseif action_id == hash("pstate_attack") and action.pressed then
		self.currentAction = action_attack
	elseif action_id == hash("pstate_move") and action.pressed then
		self.currentAction = action_move
	end
end
