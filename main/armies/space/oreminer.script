local constants = require("main/constants")

local task_gather_ore = hash("collect_ore")
local task_return_home = hash("return_home")
local task_gathering_ore = hash("chop_wood")

function init(self)
	self.currentTask = nil
	self.targetPosition = nil
	self.collectionPoint = vmath.vector3(450, 600, go.get_position().z)
	self.homeBase = vmath.vector3(140, 500, go.get_position().z)
	self.chopTimeDuration = 3
	self.chopTime = 0
	self.speed = 50
	self.animation = hash("idle")
	self.maxHealth = 30
	self.health = self.maxHealth
	self.oreCollectionAmount = 8
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function rotateShip(target)
	local to = go.get_position()
	local from = vmath.vector3(target.x, target.y, 0)
	local angle = math.atan2(to.x - from.x, from.y - to.y)
	rotation = vmath.quat_rotation_z(angle)
	go.set_rotation(rotation)
end

local function move_done(self)
	if self.currentTask == task_gather_ore then
		self.currentTask = task_gathering_ore
		self.targetPosition = nil
		self.chopTime = self.chopTimeDuration
	elseif self.currentTask == task_return_home then
		msg.post("/gui#space", constants.msgResourceCollected, { resource = "ore", amount = self.oreCollectionAmount })
		self.currentTask = task_gather_ore
		self.targetPosition = self.collectionPoint
		rotateShip(self.targetPosition)
	end
end

function update(self, dt)
	local anim = hash("move")
	if self.currentTask == nil then
		self.currentTask = task_gather_ore
		self.targetPosition = self.collectionPoint
		rotateShip(self.targetPosition)
	elseif self.currentTask == task_gathering_ore then
		anim = hash("gather")
		self.chopTime = self.chopTime - dt
		if self.chopTime < 0 then
			self.currentTask = task_return_home
			self.targetPosition = self.homeBase
			rotateShip(self.targetPosition)
			anim = hash("move")
		end
	end

	if self.targetPosition ~= nil then
		local currentPosition = go.get_position()
		local distance = vmath.length(self.targetPosition - currentPosition)
		local duration = distance / self.speed
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.targetPosition, go.EASING_LINEAR, duration, 0, move_done)
	end

	if self.animation ~= anim then
		self.animation = anim
		msg.post("#sprite", "play_animation", { id = anim})
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end
